// Code generated by mockery v2.42.2. DO NOT EDIT.

package authentication

import (
    "log/slog"
	context "context"

	mock "github.com/stretchr/testify/mock"

	oidc "github.com/neticdk-k8s/ic/internal/oidc"
)

// MockAuthenticator is an autogenerated mock type for the Authenticator type
type MockAuthenticator struct {
	mock.Mock
}

type MockAuthenticator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthenticator) EXPECT() *MockAuthenticator_Expecter {
	return &MockAuthenticator_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, in
func (_m *MockAuthenticator) Login(ctx context.Context, in LoginInput) (*oidc.TokenSet, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *oidc.TokenSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, LoginInput) (*oidc.TokenSet, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, LoginInput) *oidc.TokenSet); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oidc.TokenSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, LoginInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthenticator_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthenticator_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - in LoginInput
func (_e *MockAuthenticator_Expecter) Login(ctx interface{}, in interface{}) *MockAuthenticator_Login_Call {
	return &MockAuthenticator_Login_Call{Call: _e.mock.On("Login", ctx, in)}
}

func (_c *MockAuthenticator_Login_Call) Run(run func(ctx context.Context, in LoginInput)) *MockAuthenticator_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(LoginInput))
	})
	return _c
}

func (_c *MockAuthenticator_Login_Call) Return(_a0 *oidc.TokenSet, _a1 error) *MockAuthenticator_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthenticator_Login_Call) RunAndReturn(run func(context.Context, LoginInput) (*oidc.TokenSet, error)) *MockAuthenticator_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, in
func (_m *MockAuthenticator) Logout(ctx context.Context, in LogoutInput) error {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, LogoutInput) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthenticator_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockAuthenticator_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - in LogoutInput
func (_e *MockAuthenticator_Expecter) Logout(ctx interface{}, in interface{}) *MockAuthenticator_Logout_Call {
	return &MockAuthenticator_Logout_Call{Call: _e.mock.On("Logout", ctx, in)}
}

func (_c *MockAuthenticator_Logout_Call) Run(run func(ctx context.Context, in LogoutInput)) *MockAuthenticator_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(LogoutInput))
	})
	return _c
}

func (_c *MockAuthenticator_Logout_Call) Return(_a0 error) *MockAuthenticator_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthenticator_Logout_Call) RunAndReturn(run func(context.Context, LogoutInput) error) *MockAuthenticator_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// SetLogger provides a mock function with given fields: _a0
func (_m *MockAuthenticator) SetLogger(_a0 *slog.Logger) {
	_m.Called(_a0)
}

// MockAuthenticator_SetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogger'
type MockAuthenticator_SetLogger_Call struct {
	*mock.Call
}

// SetLogger is a helper method to define mock.On call
//   - _a0 *slog.Logger
func (_e *MockAuthenticator_Expecter) SetLogger(_a0 interface{}) *MockAuthenticator_SetLogger_Call {
	return &MockAuthenticator_SetLogger_Call{Call: _e.mock.On("SetLogger", _a0)}
}

func (_c *MockAuthenticator_SetLogger_Call) Run(run func(_a0 *slog.Logger)) *MockAuthenticator_SetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*slog.Logger))
	})
	return _c
}

func (_c *MockAuthenticator_SetLogger_Call) Return() *MockAuthenticator_SetLogger_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthenticator_SetLogger_Call) RunAndReturn(run func(*slog.Logger)) *MockAuthenticator_SetLogger_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthenticator creates a new instance of MockAuthenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthenticator {
	mock := &MockAuthenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
