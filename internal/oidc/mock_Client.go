// Code generated by mockery v2.42.2. DO NOT EDIT.

package oidc

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// ExchangeAuthCode provides a mock function with given fields: ctx, in
func (_m *MockClient) ExchangeAuthCode(ctx context.Context, in ExchangeAuthCodeInput) (*TokenSet, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeAuthCode")
	}

	var r0 *TokenSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ExchangeAuthCodeInput) (*TokenSet, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ExchangeAuthCodeInput) *TokenSet); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TokenSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ExchangeAuthCodeInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_ExchangeAuthCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExchangeAuthCode'
type MockClient_ExchangeAuthCode_Call struct {
	*mock.Call
}

// ExchangeAuthCode is a helper method to define mock.On call
//   - ctx context.Context
//   - in ExchangeAuthCodeInput
func (_e *MockClient_Expecter) ExchangeAuthCode(ctx interface{}, in interface{}) *MockClient_ExchangeAuthCode_Call {
	return &MockClient_ExchangeAuthCode_Call{Call: _e.mock.On("ExchangeAuthCode", ctx, in)}
}

func (_c *MockClient_ExchangeAuthCode_Call) Run(run func(ctx context.Context, in ExchangeAuthCodeInput)) *MockClient_ExchangeAuthCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ExchangeAuthCodeInput))
	})
	return _c
}

func (_c *MockClient_ExchangeAuthCode_Call) Return(_a0 *TokenSet, _a1 error) *MockClient_ExchangeAuthCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_ExchangeAuthCode_Call) RunAndReturn(run func(context.Context, ExchangeAuthCodeInput) (*TokenSet, error)) *MockClient_ExchangeAuthCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthCodeURL provides a mock function with given fields: ctx, in
func (_m *MockClient) GetAuthCodeURL(ctx context.Context, in GetAuthCodeURLInput) (string, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthCodeURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetAuthCodeURLInput) (string, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetAuthCodeURLInput) string); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetAuthCodeURLInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetAuthCodeURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthCodeURL'
type MockClient_GetAuthCodeURL_Call struct {
	*mock.Call
}

// GetAuthCodeURL is a helper method to define mock.On call
//   - ctx context.Context
//   - in GetAuthCodeURLInput
func (_e *MockClient_Expecter) GetAuthCodeURL(ctx interface{}, in interface{}) *MockClient_GetAuthCodeURL_Call {
	return &MockClient_GetAuthCodeURL_Call{Call: _e.mock.On("GetAuthCodeURL", ctx, in)}
}

func (_c *MockClient_GetAuthCodeURL_Call) Run(run func(ctx context.Context, in GetAuthCodeURLInput)) *MockClient_GetAuthCodeURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetAuthCodeURLInput))
	})
	return _c
}

func (_c *MockClient_GetAuthCodeURL_Call) Return(_a0 string, _a1 error) *MockClient_GetAuthCodeURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetAuthCodeURL_Call) RunAndReturn(run func(context.Context, GetAuthCodeURLInput) (string, error)) *MockClient_GetAuthCodeURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenByAuthCode provides a mock function with given fields: ctx, in, localServerReadyChan
func (_m *MockClient) GetTokenByAuthCode(ctx context.Context, in GetTokenByAuthCodeInput, localServerReadyChan chan<- string) (*TokenSet, error) {
	ret := _m.Called(ctx, in, localServerReadyChan)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenByAuthCode")
	}

	var r0 *TokenSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetTokenByAuthCodeInput, chan<- string) (*TokenSet, error)); ok {
		return rf(ctx, in, localServerReadyChan)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetTokenByAuthCodeInput, chan<- string) *TokenSet); ok {
		r0 = rf(ctx, in, localServerReadyChan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TokenSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetTokenByAuthCodeInput, chan<- string) error); ok {
		r1 = rf(ctx, in, localServerReadyChan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetTokenByAuthCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenByAuthCode'
type MockClient_GetTokenByAuthCode_Call struct {
	*mock.Call
}

// GetTokenByAuthCode is a helper method to define mock.On call
//   - ctx context.Context
//   - in GetTokenByAuthCodeInput
//   - localServerReadyChan chan<- string
func (_e *MockClient_Expecter) GetTokenByAuthCode(ctx interface{}, in interface{}, localServerReadyChan interface{}) *MockClient_GetTokenByAuthCode_Call {
	return &MockClient_GetTokenByAuthCode_Call{Call: _e.mock.On("GetTokenByAuthCode", ctx, in, localServerReadyChan)}
}

func (_c *MockClient_GetTokenByAuthCode_Call) Run(run func(ctx context.Context, in GetTokenByAuthCodeInput, localServerReadyChan chan<- string)) *MockClient_GetTokenByAuthCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetTokenByAuthCodeInput), args[2].(chan<- string))
	})
	return _c
}

func (_c *MockClient_GetTokenByAuthCode_Call) Return(_a0 *TokenSet, _a1 error) *MockClient_GetTokenByAuthCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetTokenByAuthCode_Call) RunAndReturn(run func(context.Context, GetTokenByAuthCodeInput, chan<- string) (*TokenSet, error)) *MockClient_GetTokenByAuthCode_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: idToken
func (_m *MockClient) Logout(idToken string) error {
	ret := _m.Called(idToken)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(idToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockClient_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - idToken string
func (_e *MockClient_Expecter) Logout(idToken interface{}) *MockClient_Logout_Call {
	return &MockClient_Logout_Call{Call: _e.mock.On("Logout", idToken)}
}

func (_c *MockClient_Logout_Call) Run(run func(idToken string)) *MockClient_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_Logout_Call) Return(_a0 error) *MockClient_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Logout_Call) RunAndReturn(run func(string) error) *MockClient_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields: ctx, refreshToken
func (_m *MockClient) Refresh(ctx context.Context, refreshToken string) (*TokenSet, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 *TokenSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*TokenSet, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *TokenSet); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TokenSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type MockClient_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *MockClient_Expecter) Refresh(ctx interface{}, refreshToken interface{}) *MockClient_Refresh_Call {
	return &MockClient_Refresh_Call{Call: _e.mock.On("Refresh", ctx, refreshToken)}
}

func (_c *MockClient_Refresh_Call) Run(run func(ctx context.Context, refreshToken string)) *MockClient_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_Refresh_Call) Return(_a0 *TokenSet, _a1 error) *MockClient_Refresh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_Refresh_Call) RunAndReturn(run func(context.Context, string) (*TokenSet, error)) *MockClient_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
