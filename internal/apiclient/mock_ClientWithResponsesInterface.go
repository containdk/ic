// Code generated by mockery v2.50.4. DO NOT EDIT.

package apiclient

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type MockClientWithResponsesInterface struct {
	mock.Mock
}

type MockClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterface_Expecter {
	return &MockClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// CreateClusterWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterWithBodyWithResponse")
	}

	var r0 *CreateClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) (*CreateClusterResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) *CreateClusterResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateClusterWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClusterWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateClusterWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateClusterWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateClusterWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateClusterWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateClusterWithBodyWithResponse_Call{Call: _e.mock.On("CreateClusterWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateClusterWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_CreateClusterWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateClusterWithBodyWithResponse_Call) Return(_a0 *CreateClusterResponse, _a1 error) *MockClientWithResponsesInterface_CreateClusterWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateClusterWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...RequestEditorFn) (*CreateClusterResponse, error)) *MockClientWithResponsesInterface_CreateClusterWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClusterWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateClusterWithResponse(ctx context.Context, body CreateCluster, reqEditors ...RequestEditorFn) (*CreateClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterWithResponse")
	}

	var r0 *CreateClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateCluster, ...RequestEditorFn) (*CreateClusterResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CreateCluster, ...RequestEditorFn) *CreateClusterResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, CreateCluster, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateClusterWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClusterWithResponse'
type MockClientWithResponsesInterface_CreateClusterWithResponse_Call struct {
	*mock.Call
}

// CreateClusterWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body CreateCluster
//   - reqEditors ...RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateClusterWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateClusterWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateClusterWithResponse_Call{Call: _e.mock.On("CreateClusterWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateClusterWithResponse_Call) Run(run func(ctx context.Context, body CreateCluster, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_CreateClusterWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(CreateCluster), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateClusterWithResponse_Call) Return(_a0 *CreateClusterResponse, _a1 error) *MockClientWithResponsesInterface_CreateClusterWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateClusterWithResponse_Call) RunAndReturn(run func(context.Context, CreateCluster, ...RequestEditorFn) (*CreateClusterResponse, error)) *MockClientWithResponsesInterface_CreateClusterWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterWithResponse provides a mock function with given fields: ctx, clusterId, reqEditors
func (_m *MockClientWithResponsesInterface) DeleteClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*DeleteClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, clusterId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterWithResponse")
	}

	var r0 *DeleteClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*DeleteClusterResponse, error)); ok {
		return rf(ctx, clusterId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *DeleteClusterResponse); ok {
		r0 = rf(ctx, clusterId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, clusterId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeleteClusterWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterWithResponse'
type MockClientWithResponsesInterface_DeleteClusterWithResponse_Call struct {
	*mock.Call
}

// DeleteClusterWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterId string
//   - reqEditors ...RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeleteClusterWithResponse(ctx interface{}, clusterId interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteClusterWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteClusterWithResponse_Call{Call: _e.mock.On("DeleteClusterWithResponse",
		append([]interface{}{ctx, clusterId}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteClusterWithResponse_Call) Run(run func(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_DeleteClusterWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteClusterWithResponse_Call) Return(_a0 *DeleteClusterResponse, _a1 error) *MockClientWithResponsesInterface_DeleteClusterWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteClusterWithResponse_Call) RunAndReturn(run func(context.Context, string, ...RequestEditorFn) (*DeleteClusterResponse, error)) *MockClientWithResponsesInterface_DeleteClusterWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterKubeConfigWithResponse provides a mock function with given fields: ctx, clusterId, reqEditors
func (_m *MockClientWithResponsesInterface) GetClusterKubeConfigWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetClusterKubeConfigResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, clusterId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterKubeConfigWithResponse")
	}

	var r0 *GetClusterKubeConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetClusterKubeConfigResponse, error)); ok {
		return rf(ctx, clusterId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetClusterKubeConfigResponse); ok {
		r0 = rf(ctx, clusterId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetClusterKubeConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, clusterId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetClusterKubeConfigWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterKubeConfigWithResponse'
type MockClientWithResponsesInterface_GetClusterKubeConfigWithResponse_Call struct {
	*mock.Call
}

// GetClusterKubeConfigWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterId string
//   - reqEditors ...RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetClusterKubeConfigWithResponse(ctx interface{}, clusterId interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetClusterKubeConfigWithResponse_Call {
	return &MockClientWithResponsesInterface_GetClusterKubeConfigWithResponse_Call{Call: _e.mock.On("GetClusterKubeConfigWithResponse",
		append([]interface{}{ctx, clusterId}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetClusterKubeConfigWithResponse_Call) Run(run func(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetClusterKubeConfigWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetClusterKubeConfigWithResponse_Call) Return(_a0 *GetClusterKubeConfigResponse, _a1 error) *MockClientWithResponsesInterface_GetClusterKubeConfigWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetClusterKubeConfigWithResponse_Call) RunAndReturn(run func(context.Context, string, ...RequestEditorFn) (*GetClusterKubeConfigResponse, error)) *MockClientWithResponsesInterface_GetClusterKubeConfigWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterWithResponse provides a mock function with given fields: ctx, clusterId, reqEditors
func (_m *MockClientWithResponsesInterface) GetClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, clusterId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterWithResponse")
	}

	var r0 *GetClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetClusterResponse, error)); ok {
		return rf(ctx, clusterId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetClusterResponse); ok {
		r0 = rf(ctx, clusterId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, clusterId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetClusterWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterWithResponse'
type MockClientWithResponsesInterface_GetClusterWithResponse_Call struct {
	*mock.Call
}

// GetClusterWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterId string
//   - reqEditors ...RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetClusterWithResponse(ctx interface{}, clusterId interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetClusterWithResponse_Call {
	return &MockClientWithResponsesInterface_GetClusterWithResponse_Call{Call: _e.mock.On("GetClusterWithResponse",
		append([]interface{}{ctx, clusterId}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetClusterWithResponse_Call) Run(run func(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetClusterWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetClusterWithResponse_Call) Return(_a0 *GetClusterResponse, _a1 error) *MockClientWithResponsesInterface_GetClusterWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetClusterWithResponse_Call) RunAndReturn(run func(context.Context, string, ...RequestEditorFn) (*GetClusterResponse, error)) *MockClientWithResponsesInterface_GetClusterWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentWithResponse provides a mock function with given fields: ctx, namespace, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetComponentWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetComponentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, namespace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentWithResponse")
	}

	var r0 *GetComponentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...RequestEditorFn) (*GetComponentResponse, error)); ok {
		return rf(ctx, namespace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...RequestEditorFn) *GetComponentResponse); ok {
		r0 = rf(ctx, namespace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetComponentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, namespace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetComponentWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentWithResponse'
type MockClientWithResponsesInterface_GetComponentWithResponse_Call struct {
	*mock.Call
}

// GetComponentWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - reqEditors ...RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetComponentWithResponse(ctx interface{}, namespace interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetComponentWithResponse_Call {
	return &MockClientWithResponsesInterface_GetComponentWithResponse_Call{Call: _e.mock.On("GetComponentWithResponse",
		append([]interface{}{ctx, namespace, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetComponentWithResponse_Call) Run(run func(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetComponentWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetComponentWithResponse_Call) Return(_a0 *GetComponentResponse, _a1 error) *MockClientWithResponsesInterface_GetComponentWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetComponentWithResponse_Call) RunAndReturn(run func(context.Context, string, string, ...RequestEditorFn) (*GetComponentResponse, error)) *MockClientWithResponsesInterface_GetComponentWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeWithResponse provides a mock function with given fields: ctx, clusterId, nodeName, reqEditors
func (_m *MockClientWithResponsesInterface) GetNodeWithResponse(ctx context.Context, clusterId string, nodeName string, reqEditors ...RequestEditorFn) (*GetNodeResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, clusterId, nodeName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeWithResponse")
	}

	var r0 *GetNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...RequestEditorFn) (*GetNodeResponse, error)); ok {
		return rf(ctx, clusterId, nodeName, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...RequestEditorFn) *GetNodeResponse); ok {
		r0 = rf(ctx, clusterId, nodeName, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, clusterId, nodeName, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetNodeWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeWithResponse'
type MockClientWithResponsesInterface_GetNodeWithResponse_Call struct {
	*mock.Call
}

// GetNodeWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterId string
//   - nodeName string
//   - reqEditors ...RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetNodeWithResponse(ctx interface{}, clusterId interface{}, nodeName interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetNodeWithResponse_Call {
	return &MockClientWithResponsesInterface_GetNodeWithResponse_Call{Call: _e.mock.On("GetNodeWithResponse",
		append([]interface{}{ctx, clusterId, nodeName}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetNodeWithResponse_Call) Run(run func(ctx context.Context, clusterId string, nodeName string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetNodeWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetNodeWithResponse_Call) Return(_a0 *GetNodeResponse, _a1 error) *MockClientWithResponsesInterface_GetNodeWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetNodeWithResponse_Call) RunAndReturn(run func(context.Context, string, string, ...RequestEditorFn) (*GetNodeResponse, error)) *MockClientWithResponsesInterface_GetNodeWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourceWithResponse provides a mock function with given fields: ctx, clusterId, group, version, namespace, resource, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetResourceWithResponse(ctx context.Context, clusterId string, group string, version string, namespace string, resource string, name string, reqEditors ...RequestEditorFn) (*GetResourceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, clusterId, group, version, namespace, resource, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceWithResponse")
	}

	var r0 *GetResourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string, ...RequestEditorFn) (*GetResourceResponse, error)); ok {
		return rf(ctx, clusterId, group, version, namespace, resource, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string, ...RequestEditorFn) *GetResourceResponse); ok {
		r0 = rf(ctx, clusterId, group, version, namespace, resource, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetResourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, string, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, clusterId, group, version, namespace, resource, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetResourceWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceWithResponse'
type MockClientWithResponsesInterface_GetResourceWithResponse_Call struct {
	*mock.Call
}

// GetResourceWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterId string
//   - group string
//   - version string
//   - namespace string
//   - resource string
//   - name string
//   - reqEditors ...RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetResourceWithResponse(ctx interface{}, clusterId interface{}, group interface{}, version interface{}, namespace interface{}, resource interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetResourceWithResponse_Call {
	return &MockClientWithResponsesInterface_GetResourceWithResponse_Call{Call: _e.mock.On("GetResourceWithResponse",
		append([]interface{}{ctx, clusterId, group, version, namespace, resource, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetResourceWithResponse_Call) Run(run func(ctx context.Context, clusterId string, group string, version string, namespace string, resource string, name string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetResourceWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetResourceWithResponse_Call) Return(_a0 *GetResourceResponse, _a1 error) *MockClientWithResponsesInterface_GetResourceWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetResourceWithResponse_Call) RunAndReturn(run func(context.Context, string, string, string, string, string, string, ...RequestEditorFn) (*GetResourceResponse, error)) *MockClientWithResponsesInterface_GetResourceWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListClustersWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *MockClientWithResponsesInterface) ListClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListClustersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListClustersWithResponse")
	}

	var r0 *ListClustersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...RequestEditorFn) (*ListClustersResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...RequestEditorFn) *ListClustersResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListClustersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListClustersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClustersWithResponse'
type MockClientWithResponsesInterface_ListClustersWithResponse_Call struct {
	*mock.Call
}

// ListClustersWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListClustersWithResponse(ctx interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListClustersWithResponse_Call {
	return &MockClientWithResponsesInterface_ListClustersWithResponse_Call{Call: _e.mock.On("ListClustersWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListClustersWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_ListClustersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListClustersWithResponse_Call) Return(_a0 *ListClustersResponse, _a1 error) *MockClientWithResponsesInterface_ListClustersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListClustersWithResponse_Call) RunAndReturn(run func(context.Context, ...RequestEditorFn) (*ListClustersResponse, error)) *MockClientWithResponsesInterface_ListClustersWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListComponentsWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *MockClientWithResponsesInterface) ListComponentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListComponentsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListComponentsWithResponse")
	}

	var r0 *ListComponentsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...RequestEditorFn) (*ListComponentsResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...RequestEditorFn) *ListComponentsResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListComponentsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListComponentsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListComponentsWithResponse'
type MockClientWithResponsesInterface_ListComponentsWithResponse_Call struct {
	*mock.Call
}

// ListComponentsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListComponentsWithResponse(ctx interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListComponentsWithResponse_Call {
	return &MockClientWithResponsesInterface_ListComponentsWithResponse_Call{Call: _e.mock.On("ListComponentsWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListComponentsWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_ListComponentsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListComponentsWithResponse_Call) Return(_a0 *ListComponentsResponse, _a1 error) *MockClientWithResponsesInterface_ListComponentsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListComponentsWithResponse_Call) RunAndReturn(run func(context.Context, ...RequestEditorFn) (*ListComponentsResponse, error)) *MockClientWithResponsesInterface_ListComponentsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodesWithResponse provides a mock function with given fields: ctx, clusterId, reqEditors
func (_m *MockClientWithResponsesInterface) ListNodesWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ListNodesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, clusterId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNodesWithResponse")
	}

	var r0 *ListNodesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*ListNodesResponse, error)); ok {
		return rf(ctx, clusterId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *ListNodesResponse); ok {
		r0 = rf(ctx, clusterId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListNodesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, clusterId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListNodesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodesWithResponse'
type MockClientWithResponsesInterface_ListNodesWithResponse_Call struct {
	*mock.Call
}

// ListNodesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterId string
//   - reqEditors ...RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListNodesWithResponse(ctx interface{}, clusterId interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListNodesWithResponse_Call {
	return &MockClientWithResponsesInterface_ListNodesWithResponse_Call{Call: _e.mock.On("ListNodesWithResponse",
		append([]interface{}{ctx, clusterId}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListNodesWithResponse_Call) Run(run func(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_ListNodesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListNodesWithResponse_Call) Return(_a0 *ListNodesResponse, _a1 error) *MockClientWithResponsesInterface_ListNodesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListNodesWithResponse_Call) RunAndReturn(run func(context.Context, string, ...RequestEditorFn) (*ListNodesResponse, error)) *MockClientWithResponsesInterface_ListNodesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListPodsWithResponse provides a mock function with given fields: ctx, clusterId, reqEditors
func (_m *MockClientWithResponsesInterface) ListPodsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*ListPodsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, clusterId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPodsWithResponse")
	}

	var r0 *ListPodsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*ListPodsResponse, error)); ok {
		return rf(ctx, clusterId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *ListPodsResponse); ok {
		r0 = rf(ctx, clusterId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListPodsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, clusterId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListPodsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPodsWithResponse'
type MockClientWithResponsesInterface_ListPodsWithResponse_Call struct {
	*mock.Call
}

// ListPodsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterId string
//   - reqEditors ...RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListPodsWithResponse(ctx interface{}, clusterId interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListPodsWithResponse_Call {
	return &MockClientWithResponsesInterface_ListPodsWithResponse_Call{Call: _e.mock.On("ListPodsWithResponse",
		append([]interface{}{ctx, clusterId}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListPodsWithResponse_Call) Run(run func(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_ListPodsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListPodsWithResponse_Call) Return(_a0 *ListPodsResponse, _a1 error) *MockClientWithResponsesInterface_ListPodsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListPodsWithResponse_Call) RunAndReturn(run func(context.Context, string, ...RequestEditorFn) (*ListPodsResponse, error)) *MockClientWithResponsesInterface_ListPodsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListResourcesByTypeWithResponse provides a mock function with given fields: ctx, clusterId, group, version, resourceType, reqEditors
func (_m *MockClientWithResponsesInterface) ListResourcesByTypeWithResponse(ctx context.Context, clusterId string, group string, version string, resourceType string, reqEditors ...RequestEditorFn) (*ListResourcesByTypeResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, clusterId, group, version, resourceType)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourcesByTypeWithResponse")
	}

	var r0 *ListResourcesByTypeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, ...RequestEditorFn) (*ListResourcesByTypeResponse, error)); ok {
		return rf(ctx, clusterId, group, version, resourceType, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, ...RequestEditorFn) *ListResourcesByTypeResponse); ok {
		r0 = rf(ctx, clusterId, group, version, resourceType, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListResourcesByTypeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, clusterId, group, version, resourceType, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListResourcesByTypeWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListResourcesByTypeWithResponse'
type MockClientWithResponsesInterface_ListResourcesByTypeWithResponse_Call struct {
	*mock.Call
}

// ListResourcesByTypeWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterId string
//   - group string
//   - version string
//   - resourceType string
//   - reqEditors ...RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListResourcesByTypeWithResponse(ctx interface{}, clusterId interface{}, group interface{}, version interface{}, resourceType interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListResourcesByTypeWithResponse_Call {
	return &MockClientWithResponsesInterface_ListResourcesByTypeWithResponse_Call{Call: _e.mock.On("ListResourcesByTypeWithResponse",
		append([]interface{}{ctx, clusterId, group, version, resourceType}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListResourcesByTypeWithResponse_Call) Run(run func(ctx context.Context, clusterId string, group string, version string, resourceType string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_ListResourcesByTypeWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListResourcesByTypeWithResponse_Call) Return(_a0 *ListResourcesByTypeResponse, _a1 error) *MockClientWithResponsesInterface_ListResourcesByTypeWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListResourcesByTypeWithResponse_Call) RunAndReturn(run func(context.Context, string, string, string, string, ...RequestEditorFn) (*ListResourcesByTypeResponse, error)) *MockClientWithResponsesInterface_ListResourcesByTypeWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterKubeConfigWithBodyWithResponse provides a mock function with given fields: ctx, clusterId, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) UpdateClusterKubeConfigWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateClusterKubeConfigResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, clusterId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterKubeConfigWithBodyWithResponse")
	}

	var r0 *UpdateClusterKubeConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) (*UpdateClusterKubeConfigResponse, error)); ok {
		return rf(ctx, clusterId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) *UpdateClusterKubeConfigResponse); ok {
		r0 = rf(ctx, clusterId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateClusterKubeConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, clusterId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_UpdateClusterKubeConfigWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterKubeConfigWithBodyWithResponse'
type MockClientWithResponsesInterface_UpdateClusterKubeConfigWithBodyWithResponse_Call struct {
	*mock.Call
}

// UpdateClusterKubeConfigWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterId string
//   - contentType string
//   - body io.Reader
//   - reqEditors ...RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) UpdateClusterKubeConfigWithBodyWithResponse(ctx interface{}, clusterId interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_UpdateClusterKubeConfigWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_UpdateClusterKubeConfigWithBodyWithResponse_Call{Call: _e.mock.On("UpdateClusterKubeConfigWithBodyWithResponse",
		append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_UpdateClusterKubeConfigWithBodyWithResponse_Call) Run(run func(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_UpdateClusterKubeConfigWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_UpdateClusterKubeConfigWithBodyWithResponse_Call) Return(_a0 *UpdateClusterKubeConfigResponse, _a1 error) *MockClientWithResponsesInterface_UpdateClusterKubeConfigWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_UpdateClusterKubeConfigWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, string, io.Reader, ...RequestEditorFn) (*UpdateClusterKubeConfigResponse, error)) *MockClientWithResponsesInterface_UpdateClusterKubeConfigWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterKubeConfigWithResponse provides a mock function with given fields: ctx, clusterId, body, reqEditors
func (_m *MockClientWithResponsesInterface) UpdateClusterKubeConfigWithResponse(ctx context.Context, clusterId string, body KubeConfig, reqEditors ...RequestEditorFn) (*UpdateClusterKubeConfigResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, clusterId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterKubeConfigWithResponse")
	}

	var r0 *UpdateClusterKubeConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, KubeConfig, ...RequestEditorFn) (*UpdateClusterKubeConfigResponse, error)); ok {
		return rf(ctx, clusterId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, KubeConfig, ...RequestEditorFn) *UpdateClusterKubeConfigResponse); ok {
		r0 = rf(ctx, clusterId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateClusterKubeConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, KubeConfig, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, clusterId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_UpdateClusterKubeConfigWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterKubeConfigWithResponse'
type MockClientWithResponsesInterface_UpdateClusterKubeConfigWithResponse_Call struct {
	*mock.Call
}

// UpdateClusterKubeConfigWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterId string
//   - body KubeConfig
//   - reqEditors ...RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) UpdateClusterKubeConfigWithResponse(ctx interface{}, clusterId interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_UpdateClusterKubeConfigWithResponse_Call {
	return &MockClientWithResponsesInterface_UpdateClusterKubeConfigWithResponse_Call{Call: _e.mock.On("UpdateClusterKubeConfigWithResponse",
		append([]interface{}{ctx, clusterId, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_UpdateClusterKubeConfigWithResponse_Call) Run(run func(ctx context.Context, clusterId string, body KubeConfig, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_UpdateClusterKubeConfigWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(KubeConfig), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_UpdateClusterKubeConfigWithResponse_Call) Return(_a0 *UpdateClusterKubeConfigResponse, _a1 error) *MockClientWithResponsesInterface_UpdateClusterKubeConfigWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_UpdateClusterKubeConfigWithResponse_Call) RunAndReturn(run func(context.Context, string, KubeConfig, ...RequestEditorFn) (*UpdateClusterKubeConfigResponse, error)) *MockClientWithResponsesInterface_UpdateClusterKubeConfigWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterWithBodyWithResponse provides a mock function with given fields: ctx, clusterId, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) UpdateClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, clusterId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterWithBodyWithResponse")
	}

	var r0 *UpdateClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) (*UpdateClusterResponse, error)); ok {
		return rf(ctx, clusterId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) *UpdateClusterResponse); ok {
		r0 = rf(ctx, clusterId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, clusterId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_UpdateClusterWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterWithBodyWithResponse'
type MockClientWithResponsesInterface_UpdateClusterWithBodyWithResponse_Call struct {
	*mock.Call
}

// UpdateClusterWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterId string
//   - contentType string
//   - body io.Reader
//   - reqEditors ...RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) UpdateClusterWithBodyWithResponse(ctx interface{}, clusterId interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_UpdateClusterWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_UpdateClusterWithBodyWithResponse_Call{Call: _e.mock.On("UpdateClusterWithBodyWithResponse",
		append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_UpdateClusterWithBodyWithResponse_Call) Run(run func(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_UpdateClusterWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_UpdateClusterWithBodyWithResponse_Call) Return(_a0 *UpdateClusterResponse, _a1 error) *MockClientWithResponsesInterface_UpdateClusterWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_UpdateClusterWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, string, io.Reader, ...RequestEditorFn) (*UpdateClusterResponse, error)) *MockClientWithResponsesInterface_UpdateClusterWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterWithResponse provides a mock function with given fields: ctx, clusterId, body, reqEditors
func (_m *MockClientWithResponsesInterface) UpdateClusterWithResponse(ctx context.Context, clusterId string, body UpdateCluster, reqEditors ...RequestEditorFn) (*UpdateClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, clusterId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterWithResponse")
	}

	var r0 *UpdateClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, UpdateCluster, ...RequestEditorFn) (*UpdateClusterResponse, error)); ok {
		return rf(ctx, clusterId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, UpdateCluster, ...RequestEditorFn) *UpdateClusterResponse); ok {
		r0 = rf(ctx, clusterId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, UpdateCluster, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, clusterId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_UpdateClusterWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterWithResponse'
type MockClientWithResponsesInterface_UpdateClusterWithResponse_Call struct {
	*mock.Call
}

// UpdateClusterWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterId string
//   - body UpdateCluster
//   - reqEditors ...RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) UpdateClusterWithResponse(ctx interface{}, clusterId interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_UpdateClusterWithResponse_Call {
	return &MockClientWithResponsesInterface_UpdateClusterWithResponse_Call{Call: _e.mock.On("UpdateClusterWithResponse",
		append([]interface{}{ctx, clusterId, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_UpdateClusterWithResponse_Call) Run(run func(ctx context.Context, clusterId string, body UpdateCluster, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_UpdateClusterWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(UpdateCluster), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_UpdateClusterWithResponse_Call) Return(_a0 *UpdateClusterResponse, _a1 error) *MockClientWithResponsesInterface_UpdateClusterWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_UpdateClusterWithResponse_Call) RunAndReturn(run func(context.Context, string, UpdateCluster, ...RequestEditorFn) (*UpdateClusterResponse, error)) *MockClientWithResponsesInterface_UpdateClusterWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientWithResponsesInterface creates a new instance of MockClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
