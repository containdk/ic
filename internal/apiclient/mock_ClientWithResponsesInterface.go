// Code generated by mockery v2.42.2. DO NOT EDIT.

package apiclient

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type MockClientWithResponsesInterface struct {
	mock.Mock
}

type MockClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterface_Expecter {
	return &MockClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// GetClusterWithResponse provides a mock function with given fields: ctx, clusterId, reqEditors
func (_m *MockClientWithResponsesInterface) GetClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, clusterId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterWithResponse")
	}

	var r0 *GetClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetClusterResponse, error)); ok {
		return rf(ctx, clusterId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetClusterResponse); ok {
		r0 = rf(ctx, clusterId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, clusterId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetClusterWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterWithResponse'
type MockClientWithResponsesInterface_GetClusterWithResponse_Call struct {
	*mock.Call
}

// GetClusterWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterId string
//   - reqEditors ...RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetClusterWithResponse(ctx interface{}, clusterId interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetClusterWithResponse_Call {
	return &MockClientWithResponsesInterface_GetClusterWithResponse_Call{Call: _e.mock.On("GetClusterWithResponse",
		append([]interface{}{ctx, clusterId}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetClusterWithResponse_Call) Run(run func(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetClusterWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetClusterWithResponse_Call) Return(_a0 *GetClusterResponse, _a1 error) *MockClientWithResponsesInterface_GetClusterWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetClusterWithResponse_Call) RunAndReturn(run func(context.Context, string, ...RequestEditorFn) (*GetClusterResponse, error)) *MockClientWithResponsesInterface_GetClusterWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListClustersWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *MockClientWithResponsesInterface) ListClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListClustersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListClustersWithResponse")
	}

	var r0 *ListClustersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...RequestEditorFn) (*ListClustersResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...RequestEditorFn) *ListClustersResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListClustersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListClustersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClustersWithResponse'
type MockClientWithResponsesInterface_ListClustersWithResponse_Call struct {
	*mock.Call
}

// ListClustersWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListClustersWithResponse(ctx interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListClustersWithResponse_Call {
	return &MockClientWithResponsesInterface_ListClustersWithResponse_Call{Call: _e.mock.On("ListClustersWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListClustersWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_ListClustersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListClustersWithResponse_Call) Return(_a0 *ListClustersResponse, _a1 error) *MockClientWithResponsesInterface_ListClustersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListClustersWithResponse_Call) RunAndReturn(run func(context.Context, ...RequestEditorFn) (*ListClustersResponse, error)) *MockClientWithResponsesInterface_ListClustersWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientWithResponsesInterface creates a new instance of MockClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
