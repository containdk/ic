// Code generated by mockery v2.42.2. DO NOT EDIT.

package tokencache

import (
	oidc "github.com/neticdk-k8s/k8s-inventory-cli/internal/oidc"
	mock "github.com/stretchr/testify/mock"
)

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// Invalidate provides a mock function with given fields: key
func (_m *MockCache) Invalidate(key Key) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Invalidate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Key) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_Invalidate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invalidate'
type MockCache_Invalidate_Call struct {
	*mock.Call
}

// Invalidate is a helper method to define mock.On call
//   - key Key
func (_e *MockCache_Expecter) Invalidate(key interface{}) *MockCache_Invalidate_Call {
	return &MockCache_Invalidate_Call{Call: _e.mock.On("Invalidate", key)}
}

func (_c *MockCache_Invalidate_Call) Run(run func(key Key)) *MockCache_Invalidate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Key))
	})
	return _c
}

func (_c *MockCache_Invalidate_Call) Return(_a0 error) *MockCache_Invalidate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_Invalidate_Call) RunAndReturn(run func(Key) error) *MockCache_Invalidate_Call {
	_c.Call.Return(run)
	return _c
}

// Lookup provides a mock function with given fields: key
func (_m *MockCache) Lookup(key Key) (*oidc.TokenSet, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Lookup")
	}

	var r0 *oidc.TokenSet
	var r1 error
	if rf, ok := ret.Get(0).(func(Key) (*oidc.TokenSet, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(Key) *oidc.TokenSet); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oidc.TokenSet)
		}
	}

	if rf, ok := ret.Get(1).(func(Key) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCache_Lookup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lookup'
type MockCache_Lookup_Call struct {
	*mock.Call
}

// Lookup is a helper method to define mock.On call
//   - key Key
func (_e *MockCache_Expecter) Lookup(key interface{}) *MockCache_Lookup_Call {
	return &MockCache_Lookup_Call{Call: _e.mock.On("Lookup", key)}
}

func (_c *MockCache_Lookup_Call) Run(run func(key Key)) *MockCache_Lookup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Key))
	})
	return _c
}

func (_c *MockCache_Lookup_Call) Return(_a0 *oidc.TokenSet, _a1 error) *MockCache_Lookup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCache_Lookup_Call) RunAndReturn(run func(Key) (*oidc.TokenSet, error)) *MockCache_Lookup_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: key, tokenSet
func (_m *MockCache) Save(key Key, tokenSet oidc.TokenSet) error {
	ret := _m.Called(key, tokenSet)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Key, oidc.TokenSet) error); ok {
		r0 = rf(key, tokenSet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockCache_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - key Key
//   - tokenSet oidc.TokenSet
func (_e *MockCache_Expecter) Save(key interface{}, tokenSet interface{}) *MockCache_Save_Call {
	return &MockCache_Save_Call{Call: _e.mock.On("Save", key, tokenSet)}
}

func (_c *MockCache_Save_Call) Run(run func(key Key, tokenSet oidc.TokenSet)) *MockCache_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Key), args[1].(oidc.TokenSet))
	})
	return _c
}

func (_c *MockCache_Save_Call) Return(_a0 error) *MockCache_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_Save_Call) RunAndReturn(run func(Key, oidc.TokenSet) error) *MockCache_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
